import re
import io
import os
import base64
import logging
import colorlog
import tempfile
import sys
from PIL import Image, ImageSequence
from telegram import Update, ReplyKeyboardMarkup, constants, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, CallbackQueryHandler, filters

try:
    import moviepy
    from moviepy import VideoFileClip
    MOVIEPY_AVAILABLE = True
    logger = logging.getLogger()
    logger.info(f"MoviePy —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {moviepy.__version__}")
except ImportError as e:
    MOVIEPY_AVAILABLE = False
    logger = logging.getLogger()
    logger.warning(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ MoviePy: {e}. –ü—É—Ç–∏ Python: {sys.path}")
    logger.warning("–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install moviepy")

handler = colorlog.StreamHandler()
handler.setFormatter(colorlog.ColoredFormatter(
    '%(log_color)s%(levelname)s%(reset)s: %(message)s',
    log_colors={
        'DEBUG': 'cyan',
        'INFO': 'green',
        'WARNING': 'yellow',
        'ERROR': 'red',
        'CRITICAL': 'red,bg_white',
    }
))

logger = colorlog.getLogger()
logger.setLevel(logging.INFO)
logger.handlers = [handler]

logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('telegram').setLevel(logging.WARNING)

ZWSP = '\u200B' 
ZWNJ = '\u200C'  
ZWBSP = '\u2060'  
ZWNBSP = '\uFEFF'  

PREFIX = "–ø—Ä"

IMAGE_PREFIX = f"{PREFIX}IMG"

GIF_PREFIX = f"{PREFIX}GIF"

DEFAULT_KEY = 5

IMAGE_SIZE = (150, 150)  
IMAGE_QUALITY = 100     
MAX_IMAGE_DIMENSION = 150  

GIF_SIZE = (50, 50)    
GIF_FPS = 5            
GIF_DURATION = 200     

MAX_MESSAGE_LENGTH = 4096

USER_STATES = {}

PART_PATTERN = re.compile(r'–ß–∞—Å—Ç—å (\d+)/(\d+):')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:

# –∫–ª–∞–≤–∞


    keyboard = [
        ['üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å', 'üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å'],
        ['üì∏ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å img (GIF/PNG)', 'üîç –û –±–æ—Ç–µ']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    #—Ç–µ–∫—Å—Ç —Å—Ç–∞—Ä—Ç–∞ –Ω–æ —Ö—É–ª—å –æ–±—å—è—Å–Ω—è—Ç—å \
    
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é NullsPace üîê\n\n'
        'üí¨ <b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç</b>, –∏ —è –µ–≥–æ –∑–∞—à–∏—Ñ—Ä—É—é!\n'
        f'üìã –ê –µ—Å–ª–∏ –ø—Ä–∏—à–ª—ë—à—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "{PREFIX}"), —è –µ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä—É—é.\n'
        'üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ GIF –∏ –ø–æ–ª—É—á–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é.\n'
        'üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º.\n\n'
        'üîç –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        parse_mode='HTML',
        reply_markup=reply_markup
    )

def char_to_binary(char, key):

    char_code = ord(char) ^ key
    
    binary = format(char_code, '016b')
    
    return binary

def binary_to_char(binary, key):

    try:

        char_code = int(binary, 2)
        

        original_code = char_code ^ key
        

        return chr(original_code)
    except:
        return None

def encode_text(text: str) -> str:

    if not text:
        return PREFIX + ZWNBSP
    
    result = [PREFIX]
    key = DEFAULT_KEY
    

    i = 0
    while i < len(text):
        if i + 1 < len(text):

            char1 = text[i]
            char2 = text[i+1]
            code1 = ord(char1) ^ key
            code2 = ord(char2) ^ key
            

            bitlen1 = (code1.bit_length() + 7) // 8 * 8
            bitlen2 = (code2.bit_length() + 7) // 8 * 8
            

            binary1 = format(code1, f'0{bitlen1}b')
            binary2 = format(code2, f'0{bitlen2}b')
            

            zw_encoded1 = ''.join([ZWSP if bit == '0' else ZWNJ for bit in binary1])
            zw_encoded2 = ''.join([ZWSP if bit == '0' else ZWNJ for bit in binary2])
            

            result.append(zw_encoded1 + zw_encoded2 + ZWBSP)
            i += 2
        else:

            char = text[i]

            char_code = ord(char) ^ key
            
            
            bitlen = (char_code.bit_length() + 7) // 8 * 8
            

            binary = format(char_code, f'0{bitlen}b')
            

            zw_encoded = ''.join([ZWSP if bit == '0' else ZWNJ for bit in binary])
            result.append(zw_encoded + ZWBSP)
            i += 1
    

    result.append(ZWNBSP)
    
    return ''.join(result)

def decode_text(text: str) -> str:

    result = []
    key = DEFAULT_KEY
    

    if text.startswith(IMAGE_PREFIX):
        return decode_image(text)
    elif text.startswith(GIF_PREFIX):
        return decode_gif(text)
    

    if not text.startswith(PREFIX):
        return ""
    

    text = text[len(PREFIX):].replace(ZWNBSP, '')
    

    parts = text.split(ZWBSP)
    
    for part in parts:
        if not part:
            continue
        

        binary_sequence = ''.join(['0' if c == ZWSP else '1' for c in part])
        

        if len(binary_sequence) >= 16 and len(binary_sequence) % 8 == 0:
            try:

                if len(binary_sequence) >= 16:

                    possible_splits = []
                    

                    for split_point in range(8, len(binary_sequence), 8):
                        binary1 = binary_sequence[:split_point]
                        binary2 = binary_sequence[split_point:]
                        
                        try:
                            char1 = chr(int(binary1, 2) ^ key)
                            char2 = chr(int(binary2, 2) ^ key)
                            

                            is_valid_char1 = (('–∞' <= char1.lower() <= '—è') or 
                                             ('a' <= char1.lower() <= 'z') or 
                                             ('0' <= char1 <= '9') or
                                             char1 == ' ' or
                                             char1 in '.,:;!?()[]{}@#$%^&*-_+=<>/\\\'\"')
                            
                            is_valid_char2 = (('–∞' <= char2.lower() <= '—è') or 
                                             ('a' <= char2.lower() <= 'z') or 
                                             ('0' <= char2 <= '9') or
                                             char2 == ' ' or
                                             char2 in '.,:;!?()[]{}@#$%^&*-_+=<>/\\\'\"')
                            
                            if is_valid_char1 and is_valid_char2:
                                possible_splits.append((char1, char2))
                        except:
                            continue
                    

                    if possible_splits:

                        result.extend(possible_splits[0])
                        continue
            except:
                pass
        

        try:
            char_code = int(binary_sequence, 2)
            original_code = char_code ^ key
            char = chr(original_code)
            

            is_valid_char = (('–∞' <= char.lower() <= '—è') or 
                             ('a' <= char.lower() <= 'z') or 
                             ('0' <= char <= '9') or
                             char == ' ' or
                             char in '.,:;!?()[]{}@#$%^&*-_+=<>/\\\'\"')
            
            if is_valid_char:
                result.append(char)
        except:

            pass
    
    return ''.join(result)

def resize_and_compress_image(photo_bytes):

    try:

        image = Image.open(io.BytesIO(photo_bytes))
        

        if hasattr(image, 'is_animated') and image.is_animated:
            return resize_gif(photo_bytes)
        

        width, height = image.size
        if width > height:
            new_width = min(width, MAX_IMAGE_DIMENSION)
            new_height = int(height * (new_width / width))
        else:
            new_height = min(height, MAX_IMAGE_DIMENSION)
            new_width = int(width * (new_height / height))
        

        image = image.resize((new_width, new_height), Image.LANCZOS)
        

        if image.mode == 'RGBA':
            image = image.convert('RGB')
        

        output_buffer = io.BytesIO()
        image.save(output_buffer, format='PNG', compress_level=0)
        output_buffer.seek(0)
        
        return output_buffer.getvalue()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def resize_gif(gif_bytes, is_mp4=False):

    try:

        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –±–∞–π—Ç—ã {'MP4' if is_mp4 else 'GIF'}: {len(gif_bytes)} –±–∞–π—Ç")
        

        temp_input = tempfile.NamedTemporaryFile(delete=False, suffix='.mp4' if is_mp4 else '.gif')
        temp_input.write(gif_bytes)
        temp_input.close()
        
        output_path = "temp_processed_gif.gif"
        
        if is_mp4 and MOVIEPY_AVAILABLE:

            logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MP4 –≤ GIF: {temp_input.name}")
            try:

                clip = VideoFileClip(temp_input.name)
                logger.info(f"–í–∏–¥–µ–æ –æ—Ç–∫—Ä—ã—Ç–æ: size={clip.size}, duration={clip.duration}s, fps={clip.fps}")
                

                width, height = clip.size
                if width > height:
                    new_width = min(width, GIF_SIZE[0])
                    new_height = int(height * (new_width / width))
                else:
                    new_height = min(height, GIF_SIZE[1])
                    new_width = int(width * (new_height / height))
                

                logger.info(f"–ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –¥–æ {new_width}x{new_height}")
                

                resized_clip = clip.resized((new_width, new_height))
                

                logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∫–∞–¥—Ä–æ–≤ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {GIF_FPS} FPS")
                

                logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ GIF: {output_path}")
                resized_clip.write_gif(output_path, fps=GIF_FPS)
                

                resized_clip.close()
                clip.close()
                

                with open(output_path, 'rb') as f:
                    processed_bytes = f.read()
                
                logger.info(f"MP4 —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ GIF, —Ä–∞–∑–º–µ—Ä: {len(processed_bytes)} –±–∞–π—Ç")
                

                os.unlink(temp_input.name)
                
                return processed_bytes
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ MP4 –≤ GIF: {str(e)}", exc_info=True)
        

        

        try:

            gif = Image.open(temp_input.name)
            

            logger.info(f"–û—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª: —Ñ–æ—Ä–º–∞—Ç={gif.format}, —Ä–∞–∑–º–µ—Ä={gif.size}, —Ä–µ–∂–∏–º={gif.mode}")
            

            is_animated = getattr(gif, "is_animated", False)
            logger.info(f"–§–∞–π–ª –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω: {is_animated}")
            
            if not is_animated:

                logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å—Ç–∞—Ç–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                result = resize_and_compress_image(gif_bytes)
                os.unlink(temp_input.name)
                return result
            

            frames = []
            durations = []
            

            for i, frame in enumerate(ImageSequence.Iterator(gif)):
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–¥—Ä {i+1}")
                

                frame_copy = frame.copy()
                

                width, height = frame_copy.size
                if width > height:
                    new_width = min(width, GIF_SIZE[0])
                    new_height = int(height * (new_width / width))
                else:
                    new_height = min(height, GIF_SIZE[1])
                    new_width = int(width * (new_height / height))
                

                frame_resized = frame_copy.resize((new_width, new_height), Image.LANCZOS)
                

                if frame_resized.mode == 'RGBA':
                    frame_resized = frame_resized.convert('P', palette=Image.ADAPTIVE)
                elif frame_resized.mode not in ['P']:
                    frame_resized = frame_resized.convert('P', palette=Image.ADAPTIVE)
                

                frames.append(frame_resized)
                

                try:
                    duration = frame.info.get('duration', GIF_DURATION)
                    durations.append(duration)
                except:
                    durations.append(GIF_DURATION)
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–¥—Ä–æ–≤: {len(frames)}")
            

            frames[0].save(
                output_path,
                format='GIF',
                save_all=True,
                append_images=frames[1:],
                optimize=False,
                duration=GIF_DURATION,
                loop=0
            )
            

            with open(output_path, 'rb') as f:
                processed_bytes = f.read()
            
            logger.info(f"GIF —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(processed_bytes)} –±–∞–π—Ç")
            

            os.unlink(temp_input.name)
            
            return processed_bytes
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ PIL: {str(e)}", exc_info=True)
            os.unlink(temp_input.name)
            return None
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–Ω–∏–º–∞—Ü–∏–∏: {str(e)}", exc_info=True)
        return None

def optimize_base64(base64_string):


    return base64_string

def encode_image(photo_bytes, is_gif=False):


    if is_gif:
        processed = resize_gif(photo_bytes)
        prefix = GIF_PREFIX
    else:
        processed = resize_and_compress_image(photo_bytes)
        prefix = IMAGE_PREFIX
    
    if not processed:
        return None
    

    base64_encoded = base64.b64encode(processed).decode('utf-8')
    

    base64_encoded = optimize_base64(base64_encoded)
    

    file_path = "temp_encoded_image.txt"
    

    result = [prefix]
    key = DEFAULT_KEY
    
    for char in base64_encoded:

        binary = char_to_binary(char, key)
        

        zw_encoded = ''.join([ZWSP if bit == '0' else ZWNJ for bit in binary])
        

        result.append(zw_encoded + ZWBSP)
    

    result.append(ZWNBSP)
    
    encoded_image = ''.join(result)
    

    with open(file_path, "w", encoding="utf-8") as f:
        f.write(encoded_image)
    
    return encoded_image, file_path

def decode_image(text):

    try:
        key = DEFAULT_KEY
        

        text = text[len(IMAGE_PREFIX):].replace(ZWNBSP, '')
        

        parts = text.split(ZWBSP)
        
        base64_chars = []
        
        for part in parts:
            if not part:
                continue
            

            binary = ''.join(['0' if c == ZWSP else '1' for c in part])
            

            if len(binary) != 16:
                continue
            

            char = binary_to_char(binary, key)
            if char:
                base64_chars.append(char)
        

        base64_str = ''.join(base64_chars)
        

        image_bytes = base64.b64decode(base64_str)
        
        return image_bytes
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def decode_gif(text):

    try:
        key = DEFAULT_KEY
        

        text = text[len(GIF_PREFIX):].replace(ZWNBSP, '')
        

        parts = text.split(ZWBSP)
        
        base64_chars = []
        
        for part in parts:
            if not part:
                continue
            

            binary = ''.join(['0' if c == ZWSP else '1' for c in part])
            

            if len(binary) != 16:
                continue
            

            char = binary_to_char(binary, key)
            if char:
                base64_chars.append(char)
        

        base64_str = ''.join(base64_chars)
        

        gif_bytes = base64.b64decode(base64_str)
        
        return gif_bytes
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ GIF: {e}")
        return None

def split_message(text, max_length=MAX_MESSAGE_LENGTH):

    parts = []
    

    if len(text) <= max_length:
        return [text]
    

    prefix = ""
    if text.startswith('üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:'):
        lines = text.split('\n', 1)
        if len(lines) > 1:
            prefix = lines[0] + '\n'
            text = lines[1]
    


    effective_max_length = max_length - len(prefix) - 20
    

    content_prefix = ""
    if text.startswith(PREFIX):
        content_prefix = PREFIX
        text = text[len(PREFIX):]
    

    current_length = 0
    current_part = content_prefix
    
    for char in text:

        if current_length >= effective_max_length:
            parts.append(current_part)
            current_part = content_prefix + char
            current_length = len(char)
        else:
            current_part += char
            current_length += 1
    

    if current_part and current_part != content_prefix:
        parts.append(current_part)
    

    for i in range(len(parts)):
        parts[i] = prefix + parts[i]
    
    return parts

def combine_message_parts(parts_dict):


    total_parts = len(parts_dict)
    

    if total_parts == 0:
        return ""
    

    sorted_parts = sorted(parts_dict.items(), key=lambda x: x[0])
    

    result = ""
    for part_num, part_text in sorted_parts:

        lines = part_text.split('\n', 2)
        if len(lines) > 1:

            encrypted_text = lines[1].strip()
            result += encrypted_text
    
    return result

async def ask_for_split_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE, encoded_text: str):


    parts = split_message(f'üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{encoded_text}')
    parts_count = len(parts)
    

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, —Ä–∞–∑–¥–µ–ª–∏—Ç—å", callback_data=f"split_yes_{len(encoded_text)}"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="split_no")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    

    await update.message.reply_text(
        f'‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º ({len(encoded_text)} —Å–∏–º–≤–æ–ª–æ–≤).\n'
        f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram - {MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.\n'
        f'–†–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ {parts_count} —Å–æ–æ–±—â–µ–Ω–∏–π?',
        reply_markup=reply_markup
    )
    

    if 'user_data' not in context.bot_data:
        context.bot_data['user_data'] = {}
    
    context.bot_data['user_data'][update.effective_user.id] = {
        'encoded_text': encoded_text,
        'original_message': update.message
    }

async def handle_split_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):

    query = update.callback_query
    await query.answer()
    

    data = query.data
    

    if data == "split_no":
        await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞.")
        return
    

    if data.startswith("split_yes_"):

        user_id = update.effective_user.id
        if 'user_data' in context.bot_data and user_id in context.bot_data['user_data']:
            encoded_text = context.bot_data['user_data'][user_id]['encoded_text']
            original_message = context.bot_data['user_data'][user_id]['original_message']
            

            full_message = f'üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{encoded_text}'
            message_parts = split_message(full_message)
            

            await query.edit_message_text(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {len(message_parts)} —á–∞—Å—Ç—è—Ö...")
            

            error_occurred = False
            
            try:

                for i, part in enumerate(message_parts):

                    if len(part) <= MAX_MESSAGE_LENGTH:

                        if len(message_parts) > 1:
                            part_label = f"–ß–∞—Å—Ç—å {i+1}/{len(message_parts)}: "

                            if len(part) + len(part_label) <= MAX_MESSAGE_LENGTH:
                                await original_message.reply_text(f"{part_label}{part}")
                            else:
                                await original_message.reply_text(part)
                        else:
                            await original_message.reply_text(part)
                    else:
                        logger.error(f"–ß–∞—Å—Ç—å {i+1} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è: {len(part)} —Å–∏–º–≤–æ–ª–æ–≤")
                        error_occurred = True
                        break
                

                if not error_occurred:
                    await original_message.reply_text(
                        'üìã <b>–ö–∞–∫ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n\n'
                        '1Ô∏è‚É£ <b>–í–∞—Ä–∏–∞–Ω—Ç 1 (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏):</b>\n'
                        '   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –≤—Å–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ\n'
                        '   - –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç —á–∞—Å—Ç–∏ –∏ —Ä–∞—Å—à–∏—Ñ—Ä—É–µ—Ç –∏—Ö\n\n'
                        '2Ô∏è‚É£ <b>–í–∞—Ä–∏–∞–Ω—Ç 2 (–≤—Ä—É—á–Ω—É—é):</b>\n'
                        '   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∞—Å—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É\n'
                        '   - –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—Å–ª–∞—Ç—å —ç—Ç–∏ —á–∞—Å—Ç–∏ –±–æ—Ç—É',
                        parse_mode='HTML'
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)
                await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            

            if error_occurred:
                await original_message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—å—à–∏–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª.')
            

            del context.bot_data['user_data'][user_id]
        else:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:

    user_id = update.effective_user.id
    text = update.message.text
    

    part_match = PART_PATTERN.search(text)
    if part_match:
        part_num = int(part_match.group(1))
        total_parts = int(part_match.group(2))
        

        if user_id not in USER_STATES:
            USER_STATES[user_id] = {}
        
        if 'message_parts' not in USER_STATES[user_id]:
            USER_STATES[user_id]['message_parts'] = {}
            USER_STATES[user_id]['message_parts_total'] = total_parts
            await update.message.reply_text(f'üîÑ –ü–æ–ª—É—á–µ–Ω–∞ —á–∞—Å—Ç—å {part_num}/{total_parts}. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ —á–∞—Å—Ç–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏.')
        

        USER_STATES[user_id]['message_parts'][part_num] = text
        

        if len(USER_STATES[user_id]['message_parts']) == USER_STATES[user_id]['message_parts_total']:

            combined = combine_message_parts(USER_STATES[user_id]['message_parts'])
            

            if combined.startswith(PREFIX) and (ZWSP in combined or ZWNJ in combined):
                await update.message.reply_text('üîÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π...')
                

                if combined.startswith(IMAGE_PREFIX):

                    image_bytes = decode_image(combined)
                    if image_bytes:

                        await update.message.reply_photo(
                            photo=io.BytesIO(image_bytes),
                            caption='üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —á–∞—Å—Ç–µ–π'
                        )
                    else:
                        await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —á–∞—Å—Ç–µ–π.')
                
                elif combined.startswith(GIF_PREFIX):

                    gif_bytes = decode_gif(combined)
                    if gif_bytes:

                        temp_gif = tempfile.NamedTemporaryFile(delete=False, suffix='.gif')
                        temp_gif.write(gif_bytes)
                        temp_gif.close()
                        

                        try:
                            await update.message.reply_animation(
                                animation=open(temp_gif.name, 'rb'),
                                caption='üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è GIF-–∞–Ω–∏–º–∞—Ü–∏—è –∏–∑ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —á–∞—Å—Ç–µ–π'
                            )
                            os.unlink(temp_gif.name)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∏–º–∞—Ü–∏–∏: {str(e)}")
                            await update.message.reply_document(
                                document=open(temp_gif.name, 'rb'),
                                filename="decrypted_animation.gif",
                                caption='üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è GIF-–∞–Ω–∏–º–∞—Ü–∏—è –∏–∑ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —á–∞—Å—Ç–µ–π (–∫–∞–∫ —Ñ–∞–π–ª)'
                            )
                            os.unlink(temp_gif.name)
                    else:
                        await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å GIF-–∞–Ω–∏–º–∞—Ü–∏—é –∏–∑ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —á–∞—Å—Ç–µ–π.')
                
                else:

                    decoded = decode_text(combined)
                    if decoded:
                        await update.message.reply_text(f'üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {total_parts} —á–∞—Å—Ç–µ–π:\n{decoded}')
                    else:
                        await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —á–∞—Å—Ç–µ–π.')
            

            del USER_STATES[user_id]['message_parts']
            del USER_STATES[user_id]['message_parts_total']
            
        else:

            remaining = USER_STATES[user_id]['message_parts_total'] - len(USER_STATES[user_id]['message_parts'])
            await update.message.reply_text(f'‚úÖ –ß–∞—Å—Ç—å {part_num}/{total_parts} –ø–æ–ª—É—á–µ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å {remaining} —á–∞—Å—Ç–µ–π.')
        
        return
    #–æ—Å–Ω–æ–≤–∞ –≤—ã—à–µ —Ç–∏–ø–æ —â–∞—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—É–¥—É—Ç –≤—Å—è–∫–∏–µ )

    if text == 'üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å':
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:')
        return
    
    if text == 'üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å':
        await update.message.reply_text(
            f'–î–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –µ—Å—Ç—å —á–µ—Ç—ã—Ä–µ —Å–ø–æ—Å–æ–±–∞:\n\n'
            f'1Ô∏è‚É£ –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å "{PREFIX}"\n'
            f'2Ô∏è‚É£ –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º\n'
            f'3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–æ —Å–∫—Ä—ã—Ç—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º\n'
            f'4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –≤—Å–µ —á–∞—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'
        )
        return
    
    if text == 'üì∏ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å img (GIF/PNG)':

        if user_id not in USER_STATES:
            USER_STATES[user_id] = {}
        USER_STATES[user_id]['waiting_for_photo'] = True
        
        await update.message.reply_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ GIF, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å:')
        return
    
    if text == 'üîç –û –±–æ—Ç–µ':
        await update.message.reply_text(
            'üîê <b>NullsPace Steganography Bot</b>\n\n'
            'ü§´ –≠—Ç–æ—Ç –±–æ—Ç —à–∏—Ñ—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –Ω–µ–≤–∏–¥–∏–º—ã—Ö zero-width —Å–∏–º–≤–æ–ª–æ–≤.\n'
            'üîç –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç "–ø—Ä".\n'
            'üñºÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–¥–æ 150√ó150 –ø–∏–∫—Å–µ–ª–µ–π –≤ PNG)!\n'
            'üéûÔ∏è –¢–∞–∫–∂–µ —à–∏—Ñ—Ä—É–µ—Ç GIF-–∞–Ω–∏–º–∞—Ü–∏–∏ (50√ó50, 5 FPS)!\n\n'
            'üìù <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n'
            '1. –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Üí –ø–æ–ª—É—á–∏—Ç–µ —à–∏—Ñ—Ä\n'
            '2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ GIF ‚Üí –ø–æ–ª—É—á–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é\n'
            '3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —à–∏—Ñ—Ä ‚Üí –ø–æ–ª—É—á–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/GIF\n'
            '4. –ï—Å–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ "üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:" —Å "–ø—Ä" ‚Üí –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—à–∏—Ñ—Ä—É–µ—Ç\n'
            '5. –î–ª—è –±–æ–ª—å—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –Ω–∞ —á–∞—Å—Ç–∏ ‚Üí –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ —á–∞—Å—Ç–∏ –±–æ—Ç—É –∏ –æ–Ω —Å–æ–±–µ—Ä–µ—Ç –∏—Ö\n\n'
            '‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –§–∞–π–ª—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –±–æ–ª—å—à–∏–º–∏ –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n\n'
            '‚öôÔ∏è <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è:</b> –°—Ç–µ–≥–∞–Ω–æ–≥—Ä–∞—Ñ–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º zero-width —Å–∏–º–≤–æ–ª–æ–≤ Unicode –∏ XOR —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ',
            parse_mode='HTML'
        )
        return
    

    if text.startswith(PREFIX) and (ZWSP in text or ZWNJ in text):

        if text.startswith(IMAGE_PREFIX):
            await update.message.reply_text('üîÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...')

            image_bytes = decode_image(text)
            if image_bytes:

                await update.message.reply_photo(
                    photo=io.BytesIO(image_bytes),
                    caption='üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞'
                )
            else:
                await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.')

        elif text.startswith(GIF_PREFIX):
            await update.message.reply_text('üîÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é GIF-–∞–Ω–∏–º–∞—Ü–∏—é...')

            gif_bytes = decode_gif(text)
            if gif_bytes:

                temp_gif = tempfile.NamedTemporaryFile(delete=False, suffix='.gif')
                temp_gif.write(gif_bytes)
                temp_gif.close()
                

                try:
                    await update.message.reply_animation(
                        animation=open(temp_gif.name, 'rb'),
                        caption='üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è GIF-–∞–Ω–∏–º–∞—Ü–∏—è'
                    )

                    os.unlink(temp_gif.name)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∏–º–∞—Ü–∏–∏: {str(e)}")

                    await update.message.reply_document(
                        document=open(temp_gif.name, 'rb'),
                        filename="decrypted_animation.gif",
                        caption='üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è GIF-–∞–Ω–∏–º–∞—Ü–∏—è (–∫–∞–∫ —Ñ–∞–π–ª)'
                    )

                    os.unlink(temp_gif.name)
            else:
                await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å GIF-–∞–Ω–∏–º–∞—Ü–∏—é.')
        else:

            decoded = decode_text(text)
            if decoded:
                await update.message.reply_text(f'üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{decoded}')
            else:
                await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.')

    elif text.startswith('üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:'):

        lines = text.split('\n')
        if len(lines) > 1:
            encrypted_text = lines[1]
            

            if encrypted_text.startswith(PREFIX) and (ZWSP in encrypted_text or ZWNJ in encrypted_text):

                if encrypted_text.startswith(IMAGE_PREFIX):
                    await update.message.reply_text('üîÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...')
                    image_bytes = decode_image(encrypted_text)
                    if image_bytes:
                        await update.message.reply_photo(
                            photo=io.BytesIO(image_bytes),
                            caption='üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞'
                        )
                    else:
                        await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.')
                elif encrypted_text.startswith(GIF_PREFIX):
                    await update.message.reply_text('üîÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é GIF-–∞–Ω–∏–º–∞—Ü–∏—é...')
                    gif_bytes = decode_gif(encrypted_text)
                    if gif_bytes:
                        temp_gif = tempfile.NamedTemporaryFile(delete=False, suffix='.gif')
                        temp_gif.write(gif_bytes)
                        temp_gif.close()
                        
                        try:
                            await update.message.reply_animation(
                                animation=open(temp_gif.name, 'rb'),
                                caption='üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è GIF-–∞–Ω–∏–º–∞—Ü–∏—è'
                            )
                            os.unlink(temp_gif.name)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∏–º–∞—Ü–∏–∏: {str(e)}")
                            await update.message.reply_document(
                                document=open(temp_gif.name, 'rb'),
                                filename="decrypted_animation.gif",
                                caption='üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è GIF-–∞–Ω–∏–º–∞—Ü–∏—è (–∫–∞–∫ —Ñ–∞–π–ª)'
                            )
                            os.unlink(temp_gif.name)
                    else:
                        await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å GIF-–∞–Ω–∏–º–∞—Ü–∏—é.')
                else:
                    decoded = decode_text(encrypted_text)
                    if decoded:
                        await update.message.reply_text(f'üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{decoded}')
                    else:
                        await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.')
            else:

                encoded = encode_text(text)
                

                full_message = f'üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{encoded}'
                if len(full_message) > MAX_MESSAGE_LENGTH:

                    await ask_for_split_confirmation(update, context, encoded)
                else:

                    await update.message.reply_text(full_message)
                    await update.message.reply_text(
                        'üìã <b>–ö–∞–∫ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n'
                        '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É\n'
                        '2. –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—Å–ª–∞—Ç—å –µ–≥–æ –±–æ—Ç—É –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏',
                        parse_mode='HTML'
                    )
        else:

            encoded = encode_text(text)
            

            full_message = f'üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{encoded}'
            if len(full_message) > MAX_MESSAGE_LENGTH:

                await ask_for_split_confirmation(update, context, encoded)
            else:

                await update.message.reply_text(full_message)
                await update.message.reply_text(
                    'üìã <b>–ö–∞–∫ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n'
                    '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É\n'
                    '2. –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—Å–ª–∞—Ç—å –µ–≥–æ –±–æ—Ç—É –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏',
                    parse_mode='HTML'
                )
    else:

        encoded = encode_text(text)
        

        full_message = f'üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{encoded}'
        if len(full_message) > MAX_MESSAGE_LENGTH:

            await ask_for_split_confirmation(update, context, encoded)
        else:

            await update.message.reply_text(full_message)
            await update.message.reply_text(
                'üìã <b>–ö–∞–∫ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n'
                '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É\n'
                '2. –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—Å–ª–∞—Ç—å –µ–≥–æ –±–æ—Ç—É –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏',
                parse_mode='HTML'
            )


async def handle_animation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:

    user_id = update.effective_user.id
    

    animation = update.message.animation
    

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è: file_id={animation.file_id}, —Ä–∞–∑–º–µ—Ä={animation.file_size}, —Ç–∏–ø={animation.mime_type}")
    
    # –∞–Ω–∏–º–∞—á–∫–∏ –Ω–∏–∂–µ 

    if "mp4" in animation.mime_type.lower() and not MOVIEPY_AVAILABLE:
        await update.message.reply_text(
            '‚ùå –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ MP4-–∞–Ω–∏–º–∞—Ü–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ MoviePy.\n'
            '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: `pip install moviepy`'
        )
        return
    
    try:

        animation_file = await context.bot.get_file(animation.file_id)
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª: {animation_file.file_path}")
        

        status_message = await update.message.reply_text('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞–Ω–∏–º–∞—Ü–∏—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è (5 FPS, 50√ó50).')
        

        animation_bytes = await animation_file.download_as_bytearray()
        logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º {len(animation_bytes)} –±–∞–π—Ç")
        

        with open("temp_original_animation.gif", "wb") as f:
            f.write(animation_bytes)
        logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        

        is_mp4 = "mp4" in animation.mime_type.lower()
        

        encoded_result = None
        

        processed_bytes = resize_gif(animation_bytes, is_mp4=is_mp4)
        
        if processed_bytes:

            encoded_result = encode_image(processed_bytes, is_gif=True)
        
        if encoded_result:
            encoded_gif, file_path = encoded_result
            

            await status_message.edit_text('‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!')
            

            await update.message.reply_text('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–∏–º –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞!')
            

            await update.message.reply_document(
                document=open(file_path, 'rb'),
                filename="encrypted_animation.txt",
                caption="üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è (–≤ —Ñ–∞–π–ª–µ)"
            )
            

            await update.message.reply_text(
                'üìã <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é:</b>\n\n'
                '1Ô∏è‚É£ <b>–í–∞—Ä–∏–∞–Ω—Ç 1 (—Ñ–∞–π–ª):</b>\n'
                '   - –°–∫–∞—á–∞–π—Ç–µ –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –±–æ—Ç—É\n\n'
                '2Ô∏è‚É£ <b>–í–∞—Ä–∏–∞–Ω—Ç 2 (—Ç–µ–∫—Å—Ç):</b>\n'
                '   - –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ\n'
                '   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—Å—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ\n'
                '   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—é\n'
                '   - –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É\n\n'
                '3Ô∏è‚É£ <b>–í–∞—Ä–∏–∞–Ω—Ç 3 (–µ—Å–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π):</b>\n'
                '   - –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ —á–∞—Å—Ç–∏\n'
                '   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ —á–∞—Å—Ç–∏ –±–æ—Ç—É –ø–æ –æ—á–µ—Ä–µ–¥–∏\n'
                '   - –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–µ—Ä–µ—Ç –∏ —Ä–∞—Å—à–∏—Ñ—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ',
                parse_mode='HTML'
            )
        else:
            await status_message.edit_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë –∫–∞–∫ —Ñ–∞–π–ª (GIF).')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–Ω–∏–º–∞—Ü–∏–∏: {str(e)}", exc_info=True)
        await update.message.reply_text(f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–Ω–∏–º–∞—Ü–∏–∏: {str(e)}')

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:

    user_id = update.effective_user.id
    

    is_waiting = USER_STATES.get(user_id, {}).get('waiting_for_photo', False)
    

    photo = update.message.photo[-1]
    

    photo_file = await context.bot.get_file(photo.file_id)
    photo_bytes = await photo_file.download_as_bytearray()
    

    await update.message.reply_text('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (PNG –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞).')
    

    try:
        encoded_result = encode_image(photo_bytes)
        
        if encoded_result:
            encoded_image, file_path = encoded_result
            

            await update.message.reply_text('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–∂–∞—Ç–∏—è!')
            

            await update.message.reply_document(
                document=open(file_path, 'rb'),
                filename="encrypted_image_hq.txt",
                caption="üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (–≤ —Ñ–∞–π–ª–µ)"
            )
            

#–∫–æ–Ω–µ—Ü –∞–Ω–∏–º–∞—á–∫–∏ 

            await update.message.reply_text(
                'üìã <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b>\n\n'
                '1Ô∏è‚É£ <b>–í–∞—Ä–∏–∞–Ω—Ç 1 (—Ñ–∞–π–ª):</b>\n'
                '   - –°–∫–∞—á–∞–π—Ç–µ –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –±–æ—Ç—É\n\n'
                '2Ô∏è‚É£ <b>–í–∞—Ä–∏–∞–Ω—Ç 2 (—Ç–µ–∫—Å—Ç):</b>\n'
                '   - –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ\n'
                '   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—Å—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ\n'
                '   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—é\n'
                '   - –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É\n\n'
                '3Ô∏è‚É£ <b>–í–∞—Ä–∏–∞–Ω—Ç 3 (–µ—Å–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π):</b>\n'
                '   - –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ —á–∞—Å—Ç–∏\n'
                '   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ —á–∞—Å—Ç–∏ –±–æ—Ç—É –ø–æ –æ—á–µ—Ä–µ–¥–∏\n'
                '   - –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–µ—Ä–µ—Ç –∏ —Ä–∞—Å—à–∏—Ñ—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ',
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.')
    

    if user_id in USER_STATES:
        USER_STATES[user_id]['waiting_for_photo'] = False

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:


    document = update.message.document
    
    if document.mime_type in ["text/plain", "application/txt", "text/txt"] or document.file_name.endswith(".txt"):
        await update.message.reply_text('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...')
        

        doc_file = await context.bot.get_file(document.file_id)
        file_bytes = await doc_file.download_as_bytearray()
        

        try:
            file_text = file_bytes.decode('utf-8')
            

            if file_text.startswith(PREFIX) and (ZWSP in file_text or ZWNJ in file_text):

                if file_text.startswith(IMAGE_PREFIX):
                    await update.message.reply_text('üîÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.')

                    image_bytes = decode_image(file_text)
                    if image_bytes:

                        await update.message.reply_photo(
                            photo=io.BytesIO(image_bytes),
                            caption='üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞'
                        )
                    else:
                        await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞.')

                elif file_text.startswith(GIF_PREFIX):
                    await update.message.reply_text('üîÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é GIF-–∞–Ω–∏–º–∞—Ü–∏—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.')

                    gif_bytes = decode_gif(file_text)
                    if gif_bytes:

                        temp_gif = tempfile.NamedTemporaryFile(delete=False, suffix='.gif')
                        temp_gif.write(gif_bytes)
                        temp_gif.close()
                        

                        try:
                            await update.message.reply_animation(
                                animation=open(temp_gif.name, 'rb'),
                                caption='üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è GIF-–∞–Ω–∏–º–∞—Ü–∏—è'
                            )

                            os.unlink(temp_gif.name)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∏–º–∞—Ü–∏–∏: {str(e)}")

                            await update.message.reply_document(
                                document=open(temp_gif.name, 'rb'),
                                filename="decrypted_animation.gif",
                                caption='üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è GIF-–∞–Ω–∏–º–∞—Ü–∏—è (–∫–∞–∫ —Ñ–∞–π–ª)'
                            )

                            os.unlink(temp_gif.name)
                    else:
                        await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å GIF-–∞–Ω–∏–º–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞.')
                else:

                    decoded = decode_text(file_text)
                    if decoded:
                        await update.message.reply_text(f'üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{decoded}')
                    else:
                        await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞.')
            else:
                await update.message.reply_text('‚ùå –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.')
        except UnicodeDecodeError:
            await update.message.reply_text('‚ùå –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞.')
    else:
        await update.message.reply_text('‚ùå –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt).')

def main() -> None:

    application = Application.builder().token("7633329337:AAGZxOp-DYPfLAnvsfdhntxexK0sIqXDNGM").build()


    application.add_handler(CommandHandler("start", start))
    

    application.add_handler(MessageHandler(filters.TEXT, handle_text))
    

    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    

    application.add_handler(MessageHandler(filters.ANIMATION, handle_animation))
    

    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    

    application.add_handler(CallbackQueryHandler(handle_split_callback))


    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main() 
#–∫–æ–Ω–µ—Ü —Ç–∏–ø–∞ —Ç—É—Ç —Ö–∑ —á–æ–æ –ø—Ä–∏–Ω—Ç –º–æ–∂–µ—Ç –∞ —Ö–∑ 